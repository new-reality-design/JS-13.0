1) Функцию showTypeof и вызов функции удаляем ***
//f showTypeOf
const showTypeOf = function (data) {
  console.log('showTypeOf- ', data, ':', typeof (data));
};
showTypeOf(money);
showTypeOf(appData.income);
showTypeOf(appData.deposit);


2) В объект appData добавить свойство budget которое будет принимать значение money***

3) В объект appData добавить свойства budgetDay, budgetMonth и expensesMonth, изначально равные нулю

4) Функции getExpensesMonth, getAccumulatedMonth, getTargetMonth, getStatusIncome - сделать методами объекта AppData

5) После этого поправить весь проект, чтобы он работал, а именно
Везде где вызывались наши функции поправить обращение через объект, например
let expensesMonth = appData.getExpensesMonth(); 

 Не переходить к следующим пунктам, пока не выполнишь предыдущие.

 Программа на данном этапе должна работать.


6) Сразу после объекта выполните вызов appData.asking();

7) Перенести цикл из метода getExpensesMonth в метод asking, и переписать цикл таким образом чтобы результат записывался в объект  appData.expenses
в формате:

expenses: {
    “ответ на первый вопрос” : “ответ на второй вопрос”,
    “ответ на первый вопрос” : “ответ на второй вопрос”
}

временные условия которые мы писали
if (i === 0) {
    expenses1 = prompt('Введите обязательную статью расходов?', 'Кварплата');
} else {
    expenses2 = prompt('Введите обязательную статью расходов?', 'Бензин');
}
уже не нужны, вопрос задается каждый цикл


Обратите внимание Если на вопрос "Введите обязательную статью расходов?" ответить 2 раза одинаково, значения свойства просто будут перезаписаны, для проверки отвечайте всегда по разному. (очень частая ошибка)
Проследите чтобы тип данных значения свойств были числом!

Пример результата:
expenses: {
    “Квартплата” : 5000,
    “Детский сад” : 2000
}


8) Переписать метод getExpensesMonth: с помощью цикла считаем сумму всех обязательных расходов и сохраняем результат в свойство expensesMonth нашего объекта
для того, чтобы посчитать сумму используйте цикл for in

9) getAccumulatedMonth переименовать в getBudget. Этот метод будет высчитывать значения свойств budgetMonth и budgetDay, чтобы вычислить значения используем только свойства объекта (никаких внешних переменных)

10) В методах getTargetMonth и getStatusIncome исправить переменные, все значения получаем от нашего объекта appData


11) Вызвать все необходимые методы после объекта, чтобы корректно считались все данные (порядок очень важен).

12) В консоль вывести: 

    — Расходы за месяц
    — За какой период будет достигнута цель (в месяцах)
    — Уровень дохода

Все остальное почистить в программе у нас всего две переменных money и appData
И две функции start и возможно isNumber


13) Используя цикл for in для объекта (appData), вывести в консоль сообщение "Наша программа включает в себя данные: " (вывести все свойства и значения)


14) Проверить, чтобы все работало и не было ошибок в консоли
......



'use strict';

//f isNumber
const isNumber = function (n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};

//Доходы
let money;

//f Start
let start = function () {
  do {
    money = prompt('“Ваш месячный доход?”');
  }
  while (!isNumber(money));
};
start();

/**Функции getExpensesMonth, ***
 * getAccumulatedMonth, ***
 * getTargetMonth,***
 *  getStatusIncome
 *  - сделать методами объекта AppData**/
//object appData
let appData = {
  budget: money,
  income: {},
  addIncome: [],
  expenses: {},
  addExpenses: [],
  deposit: false,
  mission: 150000,
  period: 12,
  expensesMonth: 0,
  budgetDay: 0,
  budgetMonth: 0,

  //
  asking: function () {
    let addExpenses = prompt('“Перечислите возможные статьи расходов через запятую”', 'Подарки родственникам, путешествия, оплата за курсы.');
    appData.addExpenses = addExpenses.toLowerCase().split(', ');
    appData.deposit = confirm('“Есть ли у вас депозит в банке?”');
    /*
    7) Перенести цикл из метода getExpensesMonth в метод asking, и переписать цикл таким образом чтобы результат записывался в объект  appData.expenses
в формате:

expenses: {
    “ответ на первый вопрос” : “ответ на второй вопрос”,
    “ответ на первый вопрос” : “ответ на второй вопрос”
}
     */
    for (let i = 0; i < 2; i++) {
      let expensesResponse;//Переменная для ответа-суммы
      let expenseName = prompt('“Введите обязательную статью расходов?”');//Переменная с ответом- текстом
      do {
        expensesResponse = prompt('“Во сколько это обойдется?”');
      }
      while (!isNumber(expensesResponse));
      appData.expenses[expenseName] = +expensesResponse;
      console.log('appData.expenses: ', appData.expenses);////////
    }
  },

  /*
  8) Переписать метод getExpensesMonth: с помощью цикла считаем сумму всех обязательных расходов и сохраняем результат в свойство expensesMonth нашего объекта
для того, чтобы посчитать сумму используйте цикл for in
   */
  getExpensesMonth: function () {
    let sum = 0;

    for (let key in appData.expenses) {
      // console.log(key);
      // console.log(appData.expenses[key]);
      sum += appData.expenses[key];
    }
    return (appData.expensesMonth = sum);
  },
  /*
  9) getAccumulatedMonth переименовать в getBudget. 
  Этот метод будет высчитывать значения свойств budgetMonth и budgetDay, 
  чтобы вычислить значения используем только свойства объекта 
  (никаких внешних переменных)
   */

  // getAccumulatedMonth: function (income) {
  //   return (income - expensesTotalMonth);
  // },

  getBudget: function () {
    appData.budgetDay = appData.expensesMonth / 30;
    // appData.budgetMonth = appData.budget - appData.expensesMonth;
    // appData.budgetMonth = budget - expenses;
    // appData.budgetMonth = appData.budget - appData.expensesMonth;
    // return console.log('AAA!!!', appData.budgetMonth);
  },

  //
  // getTargetMonth: function () {
  //   let achievedTarget = Math.ceil(appData.mission / appData.getAccumulatedMonth(money));

  //   if (achievedTarget < 0) {
  //     return console.log('“Цель не будет достигнута”');
  //   } else {
  //     return console.log('“Цель будет достигнута за ', achievedTarget, ' месяца/цев.”');
  //   }
  // },
  //
  getStatusIncome: function () {
    if (appData.budgetDay >= 1200) {
      return ('“У вас высокий уровень дохода”');
    } else if (appData.budgetDay >= 600 && appData.budgetDay < 1200) {
      return ('“У вас средний уровень дохода”');
    } else if (appData.budgetDay >= 0 && appData.budgetDay < 600) {
      return ('“К сожалению у вас уровень дохода ниже среднего”');
    } else if (appData.budgetDay < 0) {
      return ('“Что то пошло не так”');
    }
  }
};

//6) Сразу после объекта выполните вызов appData.asking();
appData.asking();
// appData.budgetMonth = appData.budget - appData.expensesMonth;
appData.getBudget();
// appData.getTargetMonth();
console.log('appData.budget', appData.budget);

let expensesTotalMonth = appData.expensesMonth;//0?
console.log('expensesTotalMonth: ', expensesTotalMonth);//Оставить

//от урока 4. Объявить переменную accumulatedMonth и присвоить ей результат вызова функции getAccumulatedMonth 
// let accumulatedMonth = appData.getAccumulatedMonth(money);





// let budgetDay = appData.expensesMonth / 30;
// console.log('budgetDay: ', Math.floor(budgetDay));//ConsoleLog- Оставить

console.log('Уровень дохода: ', appData.getStatusIncome());


